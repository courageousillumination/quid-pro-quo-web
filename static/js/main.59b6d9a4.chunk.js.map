{"version":3,"sources":["components/combo-slider.tsx","components/checkbox.tsx","pages/quantum-zeno.tsx","constants/api.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["ComboSlider","min","max","onValueChange","useState","value","setValue","setValueInRange","useCallback","newValue","Math","parseInt","useEffect","type","onChange","e","target","Checkbox","checked","QuantumZeno","nPhotons","setNPhotons","n","setN","hasObject","setHasObject","runningSimulation","setRunningSimulation","simulationResults","setSimulationResults","runSimulation","a","url","URL","search","URLSearchParams","toString","fetch","response","json","data","onClick","disabled","JSON","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oMAgDeA,EAtCiC,SAAC,GAI1C,IAHLC,EAGI,EAHJA,IACAC,EAEI,EAFJA,IACAC,EACI,EADJA,cACI,EACsBC,mBAAS,GAD/B,mBACGC,EADH,KACUC,EADV,KAGEC,EAAkBC,uBACtB,SAACC,GACCH,EAASI,KAAKR,IAAIQ,KAAKT,IAAIU,SAASF,EAAU,IAAKP,GAAMD,MAE3D,CAACK,EAAUJ,EAAKD,IASlB,OANAW,qBAAU,WACJT,GACFA,EAAcE,KAEf,CAACA,EAAOF,IAGT,oCACE,2BACEU,KAAK,QACLZ,IAAKA,EACLC,IAAKA,EACLG,MAAOA,EACPS,SAAU,SAACC,GAAD,OAAOR,EAAgBQ,EAAEC,OAAOX,UAE5C,2BACEQ,KAAK,SACLR,MAAOA,EACPS,SAAU,SAACC,GAAD,OAAOR,EAAgBQ,EAAEC,OAAOX,YCnBnCY,EAjB2B,SAAC,GAAuB,IAArBd,EAAoB,EAApBA,cAAoB,EACrCC,oBAAS,GAD4B,mBACxDC,EADwD,KACjDC,EADiD,KAQ/D,OANAM,qBAAU,WACJT,GACFA,EAAcE,KAEf,CAACA,EAAOF,IAGT,2BACEU,KAAK,WACLK,QAASb,EACTS,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOE,aCuC1BC,EA7Ce,WAAO,IAAD,EACFf,mBAAiB,GADf,mBAC3BgB,EAD2B,KACjBC,EADiB,OAEhBjB,mBAAiB,GAFD,mBAE3BkB,EAF2B,KAExBC,EAFwB,OAGAnB,oBAAkB,GAHlB,mBAG3BoB,EAH2B,KAGhBC,EAHgB,OAIgBrB,oBAAkB,GAJlC,mBAI3BsB,EAJ2B,KAIRC,EAJQ,OAKgBvB,qBALhB,mBAK3BwB,EAL2B,KAKRC,EALQ,KAS5BC,EAAgBtB,sBAAW,sBAAC,gCAAAuB,EAAA,6DAChCJ,GAAqB,IACfK,EAAM,IAAIC,IAAJ,UCvBQ,2CDuBR,mBACRC,OAAS,IAAIC,gBAAgB,CAC/Bf,SAAUA,EAASgB,WACnBd,EAAGA,EAAEc,WACLZ,UAAWA,EAAY,IAAM,MAC5BY,WAP6B,SAQTC,MAAML,EAAII,YARD,cAQ1BE,EAR0B,gBASbA,EAASC,OATI,OAS1BC,EAT0B,OAUhCX,EAAqBW,GACrBb,GAAqB,GAXW,4CAY/B,CAACP,EAAUE,EAAGE,EAAWK,EAAsBF,IAElD,OACE,6BACE,oDACA,kBAAC,EAAD,CAAa1B,IAAK,EAAGC,IAAK,IAAKC,cAAekB,IAC9C,oCACA,kBAAC,EAAD,CAAapB,IAAK,EAAGC,IAAK,IAAKC,cAAeoB,IAC9C,0CACA,kBAAC,EAAD,CAAUpB,cAAesB,IACzB,4BAAQgB,QAASX,EAAeY,SAAUhB,GAA1C,iBAGCA,EACC,sDAEA,6BACGE,EAAoBe,KAAKC,UAAUhB,GAAqB,QE3CpDiB,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.59b6d9a4.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\n\ninterface ComboSliderProps {\n  min: number;\n  max: number;\n  onValueChange?: (newValue: number) => void;\n}\n/**\n * Controlled combo slider + input\n */\nconst ComboSlider: React.FC<ComboSliderProps> = ({\n  min,\n  max,\n  onValueChange,\n}) => {\n  const [value, setValue] = useState(0);\n\n  const setValueInRange = useCallback(\n    (newValue) => {\n      setValue(Math.max(Math.min(parseInt(newValue, 10), max), min));\n    },\n    [setValue, max, min]\n  );\n\n  useEffect(() => {\n    if (onValueChange) {\n      onValueChange(value);\n    }\n  }, [value, onValueChange]);\n\n  return (\n    <>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={value}\n        onChange={(e) => setValueInRange(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        value={value}\n        onChange={(e) => setValueInRange(e.target.value)}\n      />\n    </>\n  );\n};\n\nexport default ComboSlider;\n","import React, { useState, useEffect } from \"react\";\n\ninterface CheckboxProps {\n  onValueChange?: (value: boolean) => void;\n}\n\nconst Checkbox: React.FC<CheckboxProps> = ({ onValueChange }) => {\n  const [value, setValue] = useState(false);\n  useEffect(() => {\n    if (onValueChange) {\n      onValueChange(value);\n    }\n  }, [value, onValueChange]);\n\n  return (\n    <input\n      type=\"checkbox\"\n      checked={value}\n      onChange={(e) => setValue(e.target.checked)}\n    />\n  );\n};\n\nexport default Checkbox;\n","import React, { useState, useCallback } from \"react\";\nimport ComboSlider from \"../components/combo-slider\";\nimport Checkbox from \"../components/checkbox\";\nimport { API_ROOT } from \"../constants/api\";\n\ninterface SimulationResults {\n  counts: { [key: string]: number };\n  ntrans: number;\n  pct: number;\n  predict: number;\n}\n\nconst QuantumZeno: React.FC = () => {\n  const [nPhotons, setNPhotons] = useState<number>(0);\n  const [n, setN] = useState<number>(0);\n  const [hasObject, setHasObject] = useState<boolean>(false);\n  const [runningSimulation, setRunningSimulation] = useState<boolean>(false);\n  const [simulationResults, setSimulationResults] = useState<\n    SimulationResults\n  >();\n\n  const runSimulation = useCallback(async () => {\n    setRunningSimulation(true);\n    const url = new URL(`${API_ROOT}/quantum-zeno`);\n    url.search = new URLSearchParams({\n      nPhotons: nPhotons.toString(),\n      n: n.toString(),\n      hasObject: hasObject ? \"1\" : \"0\",\n    }).toString();\n    const response = await fetch(url.toString());\n    const data = await response.json();\n    setSimulationResults(data);\n    setRunningSimulation(false);\n  }, [nPhotons, n, hasObject, setSimulationResults, setRunningSimulation]);\n\n  return (\n    <div>\n      <label>Number of photons</label>\n      <ComboSlider min={0} max={100} onValueChange={setNPhotons} />\n      <label>N</label>\n      <ComboSlider min={0} max={100} onValueChange={setN} />\n      <label>Object?</label>\n      <Checkbox onValueChange={setHasObject} />\n      <button onClick={runSimulation} disabled={runningSimulation}>\n        Do the thing!\n      </button>\n      {runningSimulation ? (\n        <div>Running simulation...</div>\n      ) : (\n        <div>\n          {simulationResults ? JSON.stringify(simulationResults) : null}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QuantumZeno;\n","export const API_ROOT = \"https://dry-wildwood-40834.herokuapp.com\";\n","import React from \"react\";\nimport QuantumZeno from \"./pages/quantum-zeno\";\n\nfunction App() {\n  return <QuantumZeno />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}